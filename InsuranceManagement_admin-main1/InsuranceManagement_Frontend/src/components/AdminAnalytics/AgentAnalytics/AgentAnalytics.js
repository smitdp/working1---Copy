import './AgentAnalytics.css';
import axios from 'axios';
import React, { useState, useEffect, PureComponent } from 'react';
import {baseURL} from '../../../Server';
import { LineChart, Line, Bar, BarChart, XAxis, YAxis, Label, Tooltip, Legend, CartesianGrid, ResponsiveContainer } from 'recharts';

export default function AgentAnalytics(){

    const [agentList, setAgentList] = useState([]);
    const [policyList, setPolicyList] = useState([]);
    const [userPolicyList, setUserPolicyList] = useState([]);
    //const [policiesSold, setPoliciesSold] = useState([]);
    //const [moneyGenerated, setMoneyGenerated] = useState([]);

    useEffect(() => {
        const fetchData = async () => {
          try {
            const agentListResponse = await axios.get(baseURL + '/user/agents');
            const policyListResponse = await axios.get(baseURL + '/policy');
            const userPolicyListResponse = await axios.get(baseURL + '/policy/user-policies');

            setAgentList(agentListResponse.data);
            setPolicyList(policyListResponse.data);
            setUserPolicyList(userPolicyListResponse.data);
          } catch (error) {
            console.log(error)
          }
        };
    
        fetchData();
      }, []);

    function calculatePoliciesSoldByAgent() {
        let agentPoliciesCount = {};
    
        // Initialize agentPoliciesCount with agent names
        agentList.forEach(agent => {
            agentPoliciesCount[agent.firstName + " " + agent.lastName] = 0;
        });
    
        // Count policies sold by each agent
        userPolicyList.forEach(userPolicy => {
            const agentName = userPolicy.agentName;
            agentPoliciesCount[agentName]++;
        });
    
        // Convert agentPoliciesCount to array of objects
        const result = Object.keys(agentPoliciesCount).map(agentName => ({
            agentName: agentName,
            policiesSold: agentPoliciesCount[agentName]
        }));
    
        return result;
    }
    
    // Function to calculate total revenue generated by each agent
    function calculateRevenueByAgent() {
        let agentRevenue = {};
    
        // Initialize agentRevenue with agent names
        agentList.forEach(agent => {
            agentRevenue[agent.firstName + " " + agent.lastName] = 0;
        });
    
        // Calculate revenue generated by each policy sold by an agent
        userPolicyList.forEach(userPolicy => {
            const policy = policyList.find(policy => policy.id === userPolicy.policyId);
            const agent = agentList.find(agent => agent.id === userPolicy.agentId);
    
            const installment = policy.installment;
            const duration = policy.duration;
    
            let revenue;
            if (duration < 30) {
                revenue = installment;
            } else {
                revenue = Math.floor(duration / 30) * installment;
            }
    
            agentRevenue[userPolicy.agentName] += revenue;
        });
    
        // Convert agentRevenue to array of objects
        const result = Object.keys(agentRevenue).map(agentName => ({
            agentName: agentName,
            totalRevenue: agentRevenue[agentName]
        }));
    
        return result;
    }

    function calculateAverageRevenuePerPolicy(policiesSold , revenueByAgent ) {
    
        let averageRevenuePerPolicy = {};
    
        // Calculate average revenue per policy for each agent
        policiesSold.forEach(policy => {
            const agentName = policy.agentName;
            const policiesSoldByAgent = policy.policiesSold;
            const totalRevenueByAgent = revenueByAgent.find(revenue => revenue.agentName === agentName).totalRevenue;
            
            if (policiesSoldByAgent == 0) averageRevenuePerPolicy[agentName] = 0;
            else averageRevenuePerPolicy[agentName] = totalRevenueByAgent / policiesSoldByAgent;
        });
    
        // Convert averageRevenuePerPolicy to array of objects
        const result = Object.keys(averageRevenuePerPolicy).map(agentName => ({
            agentName: agentName,
            averageRevenuePerPolicy: averageRevenuePerPolicy[agentName]
        }));
    
        console.log(averageRevenuePerPolicy);
        return result;
    }
    
    // Test the functions
    const policiesSold = calculatePoliciesSoldByAgent();
    const moneyGenerated = calculateRevenueByAgent();
    const averageRevenue = calculateAverageRevenuePerPolicy(policiesSold,moneyGenerated);

    console.log(policiesSold);
    console.log(moneyGenerated);
    console.log(averageRevenue);

    return(
<>
<h1>Agent Analytics</h1><br/>
    <div>
    <h3>Number of Policies Sold by Agents</h3>
    <ResponsiveContainer  width="100%" height={400}>
        <BarChart data={policiesSold}>
          <XAxis dataKey="agentName" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="policiesSold" fill="#8884d8" />
        </BarChart>
      </ResponsiveContainer>

      <br/><br/><h3>Total revenue generated by Agents</h3><br/>
      <ResponsiveContainer width="50%" height={400}>
      <LineChart width={800} height={400} data={moneyGenerated}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="agentName" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Line type="monotone" dataKey="totalRevenue" stroke="#8884d8" activeDot={{ r: 8 }} />
      </LineChart>
    </ResponsiveContainer>

    <br/><br/><h3>Average revenue generated by Agents</h3><br/>
      <ResponsiveContainer width="50%" height={400}>
      <LineChart width={800} height={400} data={averageRevenue}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="agentName" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Line type="monotone" dataKey="averageRevenuePerPolicy" stroke="#8884d8" activeDot={{ r: 8 }} />
      </LineChart>
    </ResponsiveContainer>

    </div>

  </>
    )
}